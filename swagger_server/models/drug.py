# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Drug(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, drug_id: str=None, name: str=None, expiration: str=None, note: str=None, created_at: str=None):  # noqa: E501
        """Drug - a model defined in Swagger

        :param drug_id: The drug_id of this Drug.  # noqa: E501
        :type drug_id: str
        :param name: The name of this Drug.  # noqa: E501
        :type name: str
        :param expiration: The expiration of this Drug.  # noqa: E501
        :type expiration: str
        :param note: The note of this Drug.  # noqa: E501
        :type note: str
        :param created_at: The created_at of this Drug.  # noqa: E501
        :type created_at: str
        """
        self.swagger_types = {
            'drug_id': str,
            'name': str,
            'expiration': str,
            'note': str,
            'created_at': str
        }

        self.attribute_map = {
            'drug_id': 'drug_id',
            'name': 'name',
            'expiration': 'expiration',
            'note': 'note',
            'created_at': 'created_at'
        }
        self._drug_id = drug_id
        self._name = name
        self._expiration = expiration
        self._note = note
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'Drug':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The drug of this Drug.  # noqa: E501
        :rtype: Drug
        """
        return util.deserialize_model(dikt, cls)

    @property
    def drug_id(self) -> str:
        """Gets the drug_id of this Drug.


        :return: The drug_id of this Drug.
        :rtype: str
        """
        return self._drug_id

    @drug_id.setter
    def drug_id(self, drug_id: str):
        """Sets the drug_id of this Drug.


        :param drug_id: The drug_id of this Drug.
        :type drug_id: str
        """

        self._drug_id = drug_id

    @property
    def name(self) -> str:
        """Gets the name of this Drug.

        Название льготного лекарства  # noqa: E501

        :return: The name of this Drug.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Drug.

        Название льготного лекарства  # noqa: E501

        :param name: The name of this Drug.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def expiration(self) -> str:
        """Gets the expiration of this Drug.

        Группа по сроку годности льготного лекарства  # noqa: E501

        :return: The expiration of this Drug.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration: str):
        """Sets the expiration of this Drug.

        Группа по сроку годности льготного лекарства  # noqa: E501

        :param expiration: The expiration of this Drug.
        :type expiration: str
        """
        allowed_values = ["new", "half", "bad"]  # noqa: E501
        if expiration not in allowed_values:
            raise ValueError(
                "Invalid value for `expiration` ({0}), must be one of {1}"
                .format(expiration, allowed_values)
            )

        self._expiration = expiration

    @property
    def note(self) -> str:
        """Gets the note of this Drug.

        Описание, пометки  # noqa: E501

        :return: The note of this Drug.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note: str):
        """Sets the note of this Drug.

        Описание, пометки  # noqa: E501

        :param note: The note of this Drug.
        :type note: str
        """

        self._note = note

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Drug.

        Дата и время поступления льготного лекарства в каталог  # noqa: E501

        :return: The created_at of this Drug.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Drug.

        Дата и время поступления льготного лекарства в каталог  # noqa: E501

        :param created_at: The created_at of this Drug.
        :type created_at: str
        """

        self._created_at = created_at
